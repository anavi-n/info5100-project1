I5 = 1
}
else{
I5 = 0
}
}
return(I5)
}
factorX7_0.1 = function(X7){
# Keep 0.1
if(is.vector(X7))
{
I7 = rep(0,length(X7))
I7[X7 == 0.1] = 0.1
}
else
{
if(X7 == 0.1){
I7 = 0.1
}
else{
I7 = 0
}
}
return(I7)
}
factorX7_0.25 = function(X7){
# Keep 0.25
if(is.vector(X7))
{
I7 = rep(0,length(X7))
I7[X7 == 0.25] = 0.25
}
else
{
if(X7 == 0.25){
I7 = 0.25
}
else{
I7 = 0
}
}
return(I7)
}
factorX7_0.4 = function(X7){
# Keep 0.4
if(is.vector(X7))
{
I7 = rep(0,length(X7))
I7[X7 == 0.4] = 0.4
}
else
{
if(X7 == 0.4){
I7 = 0.4
}
else{
I7 = 0
}
}
return(I7)
}
if(is.vector(x))
{
y_pred = (3.852084e+05 - 2.799807e+03*x[2] + 7.946226e+00 *x[2]^2
-1.124132e-02*x[2]^3 + 7.931767e-06*x[2]^4 -2.233192e-09*x[2]^5
+ 1.947569e+02*x[4] - 7.017378e-01 *x[4]^2
-4.949521e+03*factorX5_1(x[5]) + 5.567829e+00*factorX7_0.1(x[7])
+ 7.811973e+00*factorX7_0.25(x[7]) + 1.052300e+01*factorX7_0.4(x[7])
-7.298993e-03*x[2]*x[4])
}
else
{
y_pred = (3.852084e+05 - 2.799807e+03*x[,2] + 7.946226e+00 *x[,2]^2
-1.124132e-02*x[,2]^3 + 7.931767e-06*x[,2]^4 -2.233192e-09*x[,2]^5
+ 1.947569e+02*x[,4] - 7.017378e-01 *x[4]^2
-4.949521e+03*factorX5_1(x[,5]) + 5.567829e+00*factorX7_0.1(x[,7])
+ 7.811973e+00*factorX7_0.25(x[,7]) + 1.052300e+01*factorX7_0.4(x[,7])
-7.298993e-03*x[,2]*x[,4])
}
return(y_pred)
}
predict_test(data)
predict_test = function(x){
# x is an array of length 11
# y_pred is the prediction for input x
factorX5_1 = function(X5){
# Make "3.5" = "0" and "7" = "1"
if(is.vector(X5))
{
I5 = rep(0,length(X5))
I5[X5 == 7] = 1
}
else
{
if(X5 == 7){
I5 = 1
}
else{
I5 = 0
}
}
return(I5)
}
factorX7_0.1 = function(X7){
# Keep 0.1
if(is.vector(X7))
{
I7 = rep(0,length(X7))
I7[X7 == 0.1] = 0.1
}
else
{
if(X7 == 0.1){
I7 = 0.1
}
else{
I7 = 0
}
}
return(I7)
}
factorX7_0.25 = function(X7){
# Keep 0.25
if(is.vector(X7))
{
I7 = rep(0,length(X7))
I7[X7 == 0.25] = 0.25
}
else
{
if(X7 == 0.25){
I7 = 0.25
}
else{
I7 = 0
}
}
return(I7)
}
factorX7_0.4 = function(X7){
# Keep 0.4
if(is.vector(X7))
{
I7 = rep(0,length(X7))
I7[X7 == 0.4] = 0.4
}
else
{
if(X7 == 0.4){
I7 = 0.4
}
else{
I7 = 0
}
}
return(I7)
}
if(is.vector(x))
{
y_pred = (3.852084e+05 - 2.799807e+03*x[2] + 7.946226e+00 *x[2]^2
-1.124132e-02*x[2]^3 + 7.931767e-06*x[2]^4 -2.233192e-09*x[2]^5
+ 1.947569e+02*x[4] - 7.017378e-01 *x[4]^2
-4.949521e+03*factorX5_1(x[5]) + 5.567829e+00*factorX7_0.1(x[7])
+ 7.811973e+00*factorX7_0.25(x[7]) + 1.052300e+01*factorX7_0.4(x[7])
-7.298993e-03*x[2]*x[4])
}
else
{
y_pred = (3.852084e+05 - 2.799807e+03*x[,2] + 7.946226e+00 *x[,2]^2
-1.124132e-02*x[,2]^3 + 7.931767e-06*x[,2]^4 -2.233192e-09*x[,2]^5
+ 1.947569e+02*x[,4] - 7.017378e-01 *x[4]^2
-4.949521e+03*factorX5_1(x[,5]) + 5.567829e+00*factorX7_0.1(x[,7])
+ 7.811973e+00*factorX7_0.25(x[,7]) + 1.052300e+01*factorX7_0.4(x[,7])
-7.298993e-03*x[,2]*x[,4])
}
return(y_pred)
}
data = read.csv("STSCI4740_newPredictors.csv", header = TRUE, sep = "")
y_pred = predict_test(data)
View(sucrose)
df = data.frame(y_pred)
write.table(df, file = 'predictions_21.csv', sep=";", row.names=FALSE)
predict_test = function(x){
# x is an array of length 11
# y_pred is the prediction for input x
factorX5_1 = function(X5){
# Make "3.5" = "0" and "7" = "1"
if(is.vector(X5))
{
I5 = rep(0,length(X5))
I5[X5 == 7] = 1
}
else
{
if(X5 == 7){
I5 = 1
}
else{
I5 = 0
}
}
return(I5)
}
factorX7_0.1 = function(X7){
# Keep 0.1
if(is.vector(X7))
{
I7 = rep(0,length(X7))
I7[X7 == 0.1] = 1
}
else
{
if(X7 == 0.1){
I7 = 1
}
else{
I7 = 0
}
}
return(I7)
}
factorX7_0.25 = function(X7){
# Keep 0.25
if(is.vector(X7))
{
I7 = rep(0,length(X7))
I7[X7 == 0.25] = 1
}
else
{
if(X7 == 0.25){
I7 = 1
}
else{
I7 = 0
}
}
return(I7)
}
factorX7_0.4 = function(X7){
# Keep 0.4
if(is.vector(X7))
{
I7 = rep(0,length(X7))
I7[X7 == 0.4] = 1
}
else
{
if(X7 == 0.4){
I7 = 1
}
else{
I7 = 0
}
}
return(I7)
}
if(is.vector(x))
{
y_pred = (3.852084e+05 - 2.799807e+03*x[2] + 7.946226e+00 *x[2]^2
-1.124132e-02*x[2]^3 + 7.931767e-06*x[2]^4 -2.233192e-09*x[2]^5
+ 1.947569e+02*x[4] - 7.017378e-01 *x[4]^2
-4.949521e+03*factorX5_1(x[5]) + 5.567829e+00*factorX7_0.1(x[7])
+ 7.811973e+00*factorX7_0.25(x[7]) + 1.052300e+01*factorX7_0.4(x[7])
-7.298993e-03*x[2]*x[4])
}
else
{
y_pred = (3.852084e+05 - 2.799807e+03*x[,2] + 7.946226e+00 *x[,2]^2
-1.124132e-02*x[,2]^3 + 7.931767e-06*x[,2]^4 -2.233192e-09*x[,2]^5
+ 1.947569e+02*x[,4] - 7.017378e-01 *x[4]^2
-4.949521e+03*factorX5_1(x[,5]) + 5.567829e+00*factorX7_0.1(x[,7])
+ 7.811973e+00*factorX7_0.25(x[,7]) + 1.052300e+01*factorX7_0.4(x[,7])
-7.298993e-03*x[,2]*x[,4])
}
return(y_pred)
}
data = read.csv("STSCI4740_newPredictors.csv", header = TRUE, sep = "")
y_pred = predict_test(data)
df = data.frame(y_pred)
write.table(df, file = 'predictions_21.csv', sep=";", row.names=FALSE)
set.seed(1)
x = matrix(rnorm(20*2), ncol = 2)
y = c(rep(-1, 10), rep(1,10))
View(x)
View(x)
x[y==1, ] = x[y==1, ] + 1
y
set.seed(1)
x = matrix(rnorm(20*2), ncol = 2)
y = c(rep(-1, 10), rep(1,10))
x[y==1,]
View(x)
x[y==1, ] = x[y==1, ] + 1
View(x)
View(x)
plot(x, col =(3-y))
help(plot)
dat = data.frame(x = x, y = as.factor(y))
View(dat)
dat.attr
help(data.frame)
data.x
data$x
library(e1071)
install.packages("e1071")
library(e1071)
svmfit = svm(y~., data =dat, kernel = "linear", cost = 10, scale = FALSE)
plot(svmfit, dat)
set.seed(1)
x = matrix(rnorm(20*2), ncol = 2)
y = c(rep(-1, 10), rep(1,10))
x[y==1, ] = x[y==1, ] + 1
plot(x, col =(3-y))
dat = data.frame(x = x, y = as.factor(y))
library(e1071)
svmfit = svm(y~., data =dat, kernel = "linear", cost = 10, scale = FALSE)
plot(svmfit, dat)
svmfit$index
summary(svmfit)
svmfit = svm(y~., data =dat, kernel = "linear", cost = 10, scale = FALSE)
plot(svmfit, dat)
svmfit$index
summary(svmfit)
svmfit = svm(y~., data =dat, kernel = "linear", cost = 0.1, scale = FALSE)
plot(svmfit, dat)
svmfit$index
summary(svmfit)
set.seed(1)
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
tune.out = tune(svm, y~. data=dat, kernel="linear",
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
)))
tune.out = tune(svm, y~. data=dat, kernel="linear",
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
tune.out = tune(svm, y~. data=dat, kernel="linear",ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
tune.out = tune(svm, y~., data=dat, kernel="linear",ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune.out)
bestmod = tune.out$best.model
summary(bestmod)
xtest = matrix(rnorm(20*2), ncol=2)
ytest = sample(c(-1,1), 20, rep=True)
ytest = sample(c(-1,1), 20, rep=TRUE)
View(xtest)
ytest
xtest[ytest == 1, ] = xtest[ytest == 1, ] + 1
testdat = data.frame(x = xtest, y = as.factor(ytest))
ypred = predict(bestmod, testdat)
table(predict = ypred, truth = testdat$y)
svmfit = svm(y~., data=dat, kernal="linear", cost=0.01, scale=FALSE)
ypred = predict(svmfit, testdat)
table(predict=ypred, truth=testdat$y)
svmfit = svm(y~., data=dat, kernal="linear", cost=0.01, scale=FALSE)
ypred = predict(svmfit, testdat)
table(predict=ypred, truth=testdat$y)
ypred = predict(bestmod, testdat)
table(predict = ypred, truth = testdat$y)
svmfit = svm(y~., data=dat, kernal="linear", cost=0.01, scale=FALSE)
ypred = predict(svmfit, testdat)
table(predict=ypred, truth=testdat$y)
x[y==1,] = x[y==1,]+0.5
plot(x,col=(y+5)/2, pch=19)
dat = data.frame(x = x, y = as.factor(y))
svmfit = svm(y~., data=dat, kernal="linear",cost=1e5)
summary(svmfit)
plot(svmfit, dat)
svmfit = svm(y~., data=dat, kernal="linear",cost=1)
summary(svmfit)
plot(svmfit,dat)
svmfit = svm(y~., data=dat, kernal="linear",cost=1)
summary(svmfit)
plot(svmfit,dat)
city = read.csv("bigcity.csv", head = TRUE)
View(city)
city = read.csv("USArrests.csv", head = TRUE)
arrest = read.csv("USArrests.csv", head = TRUE)
View(arrest)
phone = read.csv("WorldPhones.csv", head = TRUE)
View(phone)
View(city)
View(city)
city = read.csv("bigcity.csv", head = TRUE)
hist(arrest, col="lightblue")
raw = read.csv("USArrests.csv", head = TRUE)
help(rb)
rbind
arrest = cbing(seq(1,50), raw[:,-1])
arrest = cbind(seq(1,50), raw[:,-1])
arrest = cbind(seq(1,50), raw[,-1])
View(arrest)
arrest = cbind(index, raw[,-1])
index = seq(1,50)
arrest = cbind(index, raw[,-1])
View(arrest)
hist(arrest, col="lightblue")
help(hist)
hist(raw[,2], col="lightblue")
View(raw)
plot(x=raw[,1], y=raw[,2])
which.max(arrest[,2])
which.max(arrest[,3])
which.max(arrest[,4])
which.max(arrest[,5])
which.min(arrest[,2])
which.min(arrest[,3])
which.min(arrest[,4])
which.min(arrest[,5])
labor = read.csv("labor.csv", header = TRUE)
View(labor)
raw = raw[-190,]
raw = read.csv("labor.csv", header = TRUE)
raw = raw[-190,]
View(raw)
dim(raw)
raw[,30]
raw = raw[,-30]
labor = raw
View(labor)
X00 = (X2000 + X2001 + X2002 + X2003 + X2004 + X2005 + X2006 + X2007)
labor[,21]
X00 = mean(labor[,22:29])
X00 = mean(labor[,c(22:29)])
X00 = apply(labor[,22:29], 1, mean)
X00
labor[,30] = X00
labor[,"X00"] = X00
labor[,30] = NULL
apply(labor[,30], 2, order)[ 1:4]
apply(labor[,30], 2, order)
help(t)
apply(labor[,30], 2, sort)
apply(X00, 2, sort)
dim(X00)
dim(labor)
apply(X00, sort)[1:4]
apply(X00, 1,sort)[1:4]
help(sort)
sort(X00)[1:4]
L4 = sort(X00, decreasing = TRUE)[1:4]
S4 = sort(X00)[1:4]
S4 = order(X00)[1:4]
L4 = order(X00, decreasing = TRUE)[1:4]
for (i in S4){
print(labor[,1][i])
}
for (i in S4){
labor[,1][i]
}
labor[,1][2]
for (i in S4){
labor[,1][i]
}
countryS4 = rep(NULL,4)
for (i in 1:4){
countryS4[i] = labor[,1][S4[i]]
}
labor[,1][2]
a = labor[,1][2]
a
S[1]
S4[1]
labor[,1][S4[1]]
a = labor[,1][S4[1]]
a
countryS4 = rep("",4)
for (i in 1:4){
countryS4[i] = labor[,1][S4[i]]
}
countryS4 = rep("NULL",4)
for (i in 1:4){
countryS4[i] = labor[,1][S4[i]]
}
for (i in 1:4){
labor[,1][S4[i]]
}
for (i in 1:4){
print(labor[,1][S4[i]])
}
for (i in 1:4){
print(labor[,1][S4[i]])
}
for (i in 1:4){
print(labor[,1][L4[i]])
}
setwd("D:/GitHub/info5100-project1")
women = read.table("data/WomenInWorkforce.csv",header = TRUE);
women = read.csv("data/WomenInWorkforce.csv",header = TRUE)
women = read.csv("data/WomenInWorkforce.csv",header = TRUE)
View(women)
population = read.csv("data/WorldPopulation.csv",header = TRUE)
View(population)
population = population[-1,:]
population = population[-1,]
View(population)
View(population)
population = population[c(1,11)]
View(population)
population = population[c(1,10)]
women = read.csv("data/WomenInWorkforce.csv",header = TRUE)
population = read.csv("data/WorldPopulation.csv",header = TRUE)
population = population[-1,]
population = population[c(1,10)]
View(population)
rename(population, c("X2014"="population"))
names(population)[2] = c("population")
write.csv(population, file = "data/Population.csv",row.names=TRUE)
View(population)
read.csv("data/mergedData/csv",header = TRUE)
read.csv("data/mergedData.csv",header = TRUE)
data = read.csv("data/mergedData.csv",header = TRUE)
View(data)
